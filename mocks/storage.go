// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	pkg "github.com/Olin-Hydro/mother-nature/pkg"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CreateCommandReq mocks base method.
func (m *MockStorage) CreateCommandReq(commands []pkg.Command) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommandReq", commands)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommandReq indicates an expected call of CreateCommandReq.
func (mr *MockStorageMockRecorder) CreateCommandReq(commands interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommandReq", reflect.TypeOf((*MockStorage)(nil).CreateCommandReq), commands)
}

// CreateConfigReq mocks base method.
func (m *MockStorage) CreateConfigReq(configId string) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigReq", configId)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigReq indicates an expected call of CreateConfigReq.
func (mr *MockStorageMockRecorder) CreateConfigReq(configId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigReq", reflect.TypeOf((*MockStorage)(nil).CreateConfigReq), configId)
}

// CreateGardenReq mocks base method.
func (m *MockStorage) CreateGardenReq(gardenId string) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGardenReq", gardenId)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGardenReq indicates an expected call of CreateGardenReq.
func (mr *MockStorageMockRecorder) CreateGardenReq(gardenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGardenReq", reflect.TypeOf((*MockStorage)(nil).CreateGardenReq), gardenId)
}

// CreateRALogsReq mocks base method.
func (m *MockStorage) CreateRALogsReq(RAId, limit string) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRALogsReq", RAId, limit)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRALogsReq indicates an expected call of CreateRALogsReq.
func (mr *MockStorageMockRecorder) CreateRALogsReq(RAId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRALogsReq", reflect.TypeOf((*MockStorage)(nil).CreateRALogsReq), RAId, limit)
}

// CreateRAReq mocks base method.
func (m *MockStorage) CreateRAReq(RAConfigId string) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRAReq", RAConfigId)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRAReq indicates an expected call of CreateRAReq.
func (mr *MockStorageMockRecorder) CreateRAReq(RAConfigId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRAReq", reflect.TypeOf((*MockStorage)(nil).CreateRAReq), RAConfigId)
}

// CreateSensorLogsReq mocks base method.
func (m *MockStorage) CreateSensorLogsReq(SensorId, limit string) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSensorLogsReq", SensorId, limit)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSensorLogsReq indicates an expected call of CreateSensorLogsReq.
func (mr *MockStorageMockRecorder) CreateSensorLogsReq(SensorId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSensorLogsReq", reflect.TypeOf((*MockStorage)(nil).CreateSensorLogsReq), SensorId, limit)
}
