// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	pkg "github.com/Olin-Hydro/mother-nature/pkg"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetGarden mocks base method.
func (m *MockStorage) GetGarden(gardenId string) (pkg.Garden, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGarden", gardenId)
	ret0, _ := ret[0].(pkg.Garden)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGarden indicates an expected call of GetGarden.
func (mr *MockStorageMockRecorder) GetGarden(gardenId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGarden", reflect.TypeOf((*MockStorage)(nil).GetGarden), gardenId)
}

// GetRALogs mocks base method.
func (m *MockStorage) GetRALogs(RAId, limit string) (pkg.RALogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRALogs", RAId, limit)
	ret0, _ := ret[0].(pkg.RALogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRALogs indicates an expected call of GetRALogs.
func (mr *MockStorageMockRecorder) GetRALogs(RAId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRALogs", reflect.TypeOf((*MockStorage)(nil).GetRALogs), RAId, limit)
}

// GetSensorLogs mocks base method.
func (m *MockStorage) GetSensorLogs(SensorId, limit string) (pkg.SensorLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSensorLogs", SensorId, limit)
	ret0, _ := ret[0].(pkg.SensorLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSensorLogs indicates an expected call of GetSensorLogs.
func (mr *MockStorageMockRecorder) GetSensorLogs(SensorId, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSensorLogs", reflect.TypeOf((*MockStorage)(nil).GetSensorLogs), SensorId, limit)
}
